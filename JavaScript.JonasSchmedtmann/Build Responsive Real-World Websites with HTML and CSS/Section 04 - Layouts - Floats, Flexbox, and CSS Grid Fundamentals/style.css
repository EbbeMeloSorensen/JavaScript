* {
  padding: 0;
  margin: 0;
}

h1 {
  font-size: 10px;
  text-transform: uppercase;
  font-style: italic;
  color: orange;
  color: #f00;
  color: rgb(127, 255, 0);
  color: rgba(127, 255, 0, 0.25);
  color: #1098ad;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 40px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px; /* Giver en margen under alle list items i en liste */
}

li:last-child {
  margin-bottom: 0; /* Sørger for, at der ikke er nogen margen under det SIDSTE list, dvs overrider stylen fra ovenstående rule */
}

/* Denne css rule specificerer font-family for et antal selectors på én gang
   under anvendelse af en list selector */
h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
}

/* Her har vi en anden list selector, der specificerer farve */
h1,
h2,
h3 {
  color: #1098ad;
}

article {
  margin-bottom: 60px;
}

/* Selectoren i denne css rule er en såkaldt descendant selector, der angiver, at det kun er paragraphs 
   indlejret i en footer, der skal påvirkes */
/* footer p {
    font-size: 16px;
} */

/* Dette er en "nested" descendant selector, der kun påvirker paragraphs under headers under articles */
/* article header p {
    font-style: italic;
} */

/* (de 2 descendant selectors er udkommenteret, fordi han fraråder at bruge dem) */

/* Her har vi en hash selector, der påvirker et individuelt html element */
#author {
  font-style: italic;
  font-size: 18px;
}

/* Endu en hash selector */
#copyright {
  font-size: 16px;
}

/* Her har vi en class selector, der påvirker all html-elementer med en given klasse */
.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px;
  margin-bottom: 60px;
  /* height: 80px; */
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto; /* equivalent to the two commented out lines above*/
  position: relative;
}

.post-header {
  margin-bottom: 40px;
}

.post-img {
  width: 100%;
  height: auto;
}

/* Her har vi en css rule med en almindelig element selector og 3 declarations. Bemærk de 2 nederste, der har en "shorthand property",
   som er kendetegnet ved at den tager flere værdier */
aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 40px;
  box-sizing: border-box;
}

/* I de næste 4 css rules knytter vi en såkaldt css "pseudo-class" til en selector. I dette eksempel for at ramme udvalgte items i lister*/
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(2) {
  color: red;
}

li:nth-child(odd) {
  color: purple;
}

/* I de næste 4 css rules bruger vi pseudo classes til at style links, inklusive den måde, de ser ud på, når man hover over eller klikker på dem med musen.
   Det er vigtigt, at rækkefølgen er som her, dvs LVHA */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  position: absolute;
  bottom: 20px;
  right: 20px;
}

/* FLOATS */
/*
.author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  margin-left: 20px;
  margin-top: 10px;
  float: left;
}

h1 {
  float: left;
}

nav {
  float: right;
}
*/

/* Ret gammeldags teknik til at cleare floats, der indebærer, at man skal have dummy elementer i sin html kode
.clear {
  clear: both;
}
*/

/* Dette er det såkaldte clearfix hack til at "cleare floats" for at undgå at højden af et container element kollapser.
   I tilfældet her er det header elementet med klassen main-header, hvis højde der kollapser pga at den kun indeholder 2
   floatede elementer, medmindre man bruger dette "hack", som han kalder det.*/
/*
.clearfix::after {
  clear: both;
  content: "";
  display: block;
}

article {
  width: 825px;
  float: left;
}

aside {
  width: 300px;
  float: right;
}

footer {
  clear: both;
}
*/

/* FLEXBOX */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  margin-bottom: 5px;
  display: block;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.row {
  display: flex;
  align-items: flex-start;
  gap: 75px;
  margin-bottom: 60px;
}

article {
  flex: 1;
  margin-bottom: 0;
}

aside {
  flex: 0 0 300px;
}
